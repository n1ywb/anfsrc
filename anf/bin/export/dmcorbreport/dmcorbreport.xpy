"""
dmcorbreport
============

Background
----------

The IRIS Data Management System has a reporting requirement as part of their
"Policy Regarding Redistribution of IRIS Data" (available as a PDF by request).
This script takes statistics generated by an Antelope orbserver and formats them
in a report suitable for sending to IRIS.

Input Data Format
-----------------

The input data is generated by `orbserver(1)`, and controlled by the parameters
`statistics_interval` and `statistics_file` in the orbserver parameter file.

A header describing the fields is output periodically.

Note that "Read" and "Written" are from the perspective of the orbserver, so
data being put into the orb by a client is "Read", and data being sent to a
client is "Written".

Abbreviated Example Input:

```
                  Thread  Pid     who  IP-address                Read                   Written        Command
                                                           Pkts        Bytes       Pkts        Bytes
2014-050 20:00:00    28 32114       rt@128.95.166.10          0            0     472421    465683572  orb2orb anfexport.ucsd.edu:usarrayTA@ :6710 -r @reject.ANFTA
2014-050 20:00:00    34  8386       rt@127.0.0.1         472422    465684086          0            0  orb2orb anfacq:usarray :usarrayTA
2014-050 20:00:33 14081  1563       rt@139.142.67.7           0            0          1          510  orb2orb anfexport.ucsd.edu:usarrayTA :cnsn -m @pf/orb2orb_TA.match
```

Output Data Format
------------------


Output data format for IP Based Requests:

```
2011/01/02 SL_SeedLink IU AFI 00 BH1 3875328 2011/01/02 00:00:00 2011/01/03 00:00:00 193.144.251.92 ES Spain Madrid 29 40.4000 -3.6833
```

The fields in each of the lines of the redistribution statistics file are as
follows, separated by white space:

 * Date of Request
 * Type of request, (Breqfast, NetDC, WILBER, etc.)
 * Network code, Station Code, Location ID, Channel code
 * #_of_bytes,
 * st_time: starting time of data request
 * end_time: end time of data request
 * email address or IP number for the requestor,
 * Country Abbreviation,
 * Country,
 * City,
 * Region Code (e.g. state, province, department, etc.)
 * Latitude of the requestor
 * Longitude of the requestor

The redistribution statistics file should be produced every month, gzipped and
emailed to redist_stats@iris.washington.edu.

Caveats and Limitations
-----------------------

The output data format as requested by the DMC is pretty peculiar to their way
of doing things. To wit, they require the Net Sta Chan Loc values for every
request. We don't provide data in this fashion, nor do we have the ability to
track this sort of information. Thus, the closest we can get is to blanket
assign a Net code based on the orbserver and provide dummy values for Sta, Chan,
and Loc

Statistics tracked by orbserver include protocol overhead - these are the raw
bytes transferred to/from a client, not the amount of bytes in the data payload.

"""
import logging
from optparse import OptionParser

def main(args=None):
    if args is None:
        args = sys.argv

    op = OptionParser()
    op.add_option('-n', '--netcode', action='store')
    op.add_option('-m', '--match', action='store')
    op.add_option('-r', '--reject', action='store')
    op.add_option('-p', '--parameter-file', action='store', default=args[0])
    op.add_option('-v', '--verbose', dest='verbose', action='store_true')
    (options, args) = op.parse_args(args[1:])

    if options.verbose:
        loglevel=logging.DEBUG
    else:
        loglevel=logging.INFO

    logging.basicConfig(level=loglevel)
    logging.info('hello from main')
    logging.debug('debuggery')
    logging.info('Goodbye from main')

if __name__ == '__main__':
    sys.exit(main())
# vim: ft=python
